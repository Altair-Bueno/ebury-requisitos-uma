package gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import database.HibernateStartUp;
import database.tables.LoginEntity;
import gui.alemania.Informe;
import gui.user.Main;
import org.hibernate.Session;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

public class Login extends JPanel implements Frame {
    private JPanel root;
    private JPasswordField passwordField;
    private JTextField usernameField;
    private JLabel label1;
    private JLabel label2;
    private JLabel image;
    private JButton loginButton;

    public Login() {
        add(root);
        ActionListener loginListener = (e) -> {
            var username = usernameField.getText();
            var password = String.valueOf(passwordField.getPassword());
            var search = new SearchUser(username, password, this);
            search.execute();
        };
        loginButton.addActionListener(loginListener);
        usernameField.addActionListener(loginListener);
        passwordField.addActionListener(loginListener);
    }

    @Override
    public String getTitleBarName() {
        return "Bienvenido";
    }

    @Override
    public MenuBar getMenuBar() {
        return null;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        passwordField = new JPasswordField();
        root.add(passwordField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        usernameField = new JTextField();
        root.add(usernameField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        label1 = new JLabel();
        label1.setText("Username");
        root.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label2 = new JLabel();
        label2.setText("Password");
        root.add(label2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        image = new JLabel();
        image.setIcon(new ImageIcon(getClass().getResource("/EburyLogo.png")));
        image.setText("");
        root.add(image, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setText("Login");
        root.add(loginButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(0, 3, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        root.add(spacer2, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private class SearchUser extends SwingWorker<LoginEntity, Void> {
        String username;
        String password;
        Login login;

        public SearchUser(String username, String password, Login login) {
            this.username = username;
            this.password = password;
            this.login = login;
        }

        @Override
        protected LoginEntity doInBackground() throws Exception {
            usernameField.setEnabled(false);
            passwordField.setEnabled(false);
            loginButton.setEnabled(false);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try (Session session = HibernateStartUp.getSessionFactory().openSession()) {
                return (LoginEntity) session
                        .createQuery("FROM LoginEntity WHERE user = '" + username + "' AND password = '" + password + "'")
                        .list()
                        .get(0);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void done() {
            try {
                var result = super.get();
                var panel = switch (result.getRol()) {
                    case "Regler" -> new Informe();
                    case "Regelgever" -> new gui.holanda.Informe();
                    case "User" -> new Main(result);
                    default -> throw new IllegalArgumentException();
                };
                var frame = new JFrame(panel.getTitleBarName());
                frame.setMenuBar(panel.getMenuBar());
                frame.add(panel);
                frame.pack();
                frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
                frame.setLocationRelativeTo(null);
                frame.setSize(frame.getSize());
                frame.setVisible(true);
            } catch (NullPointerException e) {
                var m = "El usuario y/o contrase√±a no se reconocen";
                JOptionPane.showMessageDialog(login, m, m, JOptionPane.WARNING_MESSAGE);
            } catch (Exception e) {
                var m = e.getMessage();
                JOptionPane.showMessageDialog(login, m, m, JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } finally {
                usernameField.setEnabled(true);
                passwordField.setEnabled(true);
                loginButton.setEnabled(true);
                setCursor(Cursor.getDefaultCursor());
            }
        }
    }
}